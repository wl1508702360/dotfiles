" Environment {{{
if &compatible
    set nocompatible
endif
set runtimepath+=~/.vim/autoload
runtime! plugin/sensible.vim
set encoding=utf-8
scriptencoding utf-8
" }}}

" Vim Plug {{{
" - Specify a directory for plugins
" - avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" reset vim
Plug 'tpope/vim-sensible'

" colorschemes
Plug 'rafi/awesome-vim-colorschemes'

" status line
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" file explorer tree
Plug 'scrooloose/nerdtree'

" NERDTree tabs
Plug 'jistr/vim-nerdtree-tabs'

" Up-to-date PHP syntax file (5.3 – 7.1 support)
Plug 'stanangeloff/php.vim'

" Improved PHP omnicompletion
Plug 'shawncplus/phpcomplete.vim'

" The official Vim indent script for PHP
Plug '2072/php-indenting-for-vim'

" Use FriendsOfPHP/PHP-CS-Fixer
Plug 'stephpy/vim-php-cs-fixer'

" Syntax checking hacks for vim
Plug 'vim-syntastic/syntastic'

" Automatically save changes to disk
Plug '907th/vim-auto-save'

" Fuzzy file, buffer, mru, tag, etc finder.
Plug 'ctrlpvim/ctrlp.vim'

" A Vim wrapper for running tests on different granularities.
"Plug 'janko-m/vim-test'

" abolish.vim: easily search for, substitute, and abbreviate multiple variants of a word
"Plug 'tpope/vim-abolish'

" fugitive.vim: a Git wrapper so awesome, it should be illegal
"Plug 'tpope/vim-fugitive'

" visually displaying indent levels in code
Plug 'nathanaelkane/vim-indent-guides'

" code-completion engine
Plug 'Valloric/YouCompleteMe'

" Go development plugin
"Plug 'fatih/vim-go'

" Provide easy code formatting in Vim by integrating existing code formatters.
Plug 'Chiel92/vim-autoformat'

" Vim plugin, insert or delete brackets, parens, quotes in pair
Plug 'jiangmiao/auto-pairs'

" A Vim alignment plugin
Plug 'junegunn/vim-easy-align'

" fcitx
Plug 'vim-scripts/fcitx.vim'

" Initialize plugin system
call plug#end()
" }}}

" General {{{
" Setup for securemodelines plugin
set modelines=1

set term=screen-256color
syntax on
set ttyfast
set lazyredraw

" Allow backgrounding buffers without writing them, and remember marks/undo
" for backgrounded buffers
set hidden
set history=1000

set autoread
set wildmenu

" Search settings
set ignorecase
set smartcase
set incsearch " Incremental search
set hlsearch  " Highlight search
set showmatch " Show matching braces

set viewoptions=folds,options,cursor,unix,slash

" Make splits open to right/bottom
set splitright
set splitbelow

" 'spell' set by default is extremely annoying for any code-like
" filetype, so I now default to 'nospell' and only turn spelling
" on for known-useful filetypes.
set nospell
set spelllang=en_us

set scrolloff=3 " context off the end of a buffer

set fillchars+=vert:┃

"set undofile " Persist undo info in <FILENAME>.un~
"silent !mkdir ~/.vimundo >& /dev/null
"set undodir=~/.vimundo"

" backups
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set backupskip=/tmp/*,/private/tmp/*
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set writebackup

" Store temporary files in a central spot
"let vimtmp = $HOME . '/.tmp/' . getpid()
"silent! call mkdir(vimtmp, "p", 0700)
"let &backupdir=vimtmp
"let &directory=vimtmp

" }}}

" Vim UI {{{
set backspace=indent,eol,start     " backspace over everything in insert mode

set background=dark
colorscheme PaperColor
"hi NonText ctermfg=239
"hi SpecialKey ctermfg=239
hi CursorLine cterm=NONE ctermbg=NONE ctermfg=NONE guibg=NONE guifg=NONE " only highlight line number, not the line
"hi CursorLineNr ctermbg=16 ctermfg=166
"hi LineNr ctermbg=16 ctermfg=243
set cursorline
set laststatus=2
set nonumber
set ruler
set showcmd

" Fix timeout problem
set ttimeoutlen=0
augroup FastEscape
    autocmd!
    au VimEnter * set timeoutlen=1000
    au InsertEnter * set timeoutlen=150
    au InsertLeave * set timeoutlen=1000
augroup END
" }}}

" Formatting {{{
set wrap
set formatoptions=qrn1
set colorcolumn=80
" Tabs
set autoindent
set smarttab
set expandtab
set shiftwidth=4
set shiftround
set softtabstop=4
set tabstop=4           " 4 space tab
filetype indent on
filetype plugin on

" }}}

" Folding {{{
set foldmethod=manual
set foldenable
set foldlevelstart=1
set foldnestmax=10
set wildignore+=*/.git/*,*/.svn/*,*/.hg/*
" }}}

" Shortcuts {{{
" fast <ESC>
inoremap jj <ESC>
inoremap jk <ESC>
inoremap kj <ESC>

" leaderkey
let mapleader="\<space>"

nnoremap <leader>q :q<CR>
nnoremap <leader>b :buffer
nnoremap <leader>bl :buffers<CR>
nnoremap <leader>w :w<CR>
nnoremap <leader><C-p> :bprev<CR>
nnoremap <leader><C-n> :bnext<CR>
nnoremap <leader>m :silent make\|redraw!\|cw<CR>
nnoremap <leader>n :NERDTreeToggle .<CR>
nnoremap <leader>t :NERDTreeTabsToggle<CR>
nnoremap <leader>h :A<CR>
nnoremap <leader>ev :vsp $MYVIMRC<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>
nnoremap <leader>sc :SyntasticCheck<CR>
nnoremap <leader>l :call ToggleNumber()<CR>
nnoremap <leader><space> :noh<CR>
nnoremap <leader>1 :set number!<CR>
vmap <leader>y :w! /tmp/vitmp<CR>
nmap <leader>p :r! cat /tmp/vitmp<CR>

" Window Shortcuts {{{
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
" }}}

" Tabs Shortcuts {{{
nnoremap th :tabfirst<CR>
nnoremap tj :tabnext<CR>
nnoremap tk :tabprev<CR>
nnoremap tl :tablast<CR>
nnoremap tt :tabedit<Space>
nnoremap tn :tabnext<Space>
nnoremap tm :tabm<Space>
nnoremap td :tabclose<CR>
" }}}
" }}}

" AutoGroups {{{
augroup configgroup
    autocmd!
    autocmd VimEnter * highlight clear SignColumn
    autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()
    autocmd BufEnter *.cls setlocal filetype=java
    autocmd BufEnter *.zsh-theme setlocal filetype=zsh
    autocmd BufEnter Makefile setlocal noexpandtab
    autocmd BufEnter *.sh setlocal tabstop=2
    autocmd BufEnter *.sh setlocal shiftwidth=2
    autocmd BufEnter *.sh setlocal softtabstop=2
    autocmd BufEnter *.py setlocal tabstop=4
    autocmd BufEnter *.md setlocal ft=markdown
    " autocmd BufEnter *.php setlocal foldmethod=indent
augroup END
" }}}

" Plugin Customize Configuration {{{
" plug Chiel92/vim-autoformat {{{
let g:autoformat_autoindent=0
let g:autoformat_retab=0
let g:autoformat_remove_trailing_spaces=1
noremap <silent> <leader>f :Autoformat<CR>
" }}}

" plug NERDTree {{{
let g:NERDTreeWinSize=28
let g:NERDTreeAutoDeleteBuffer=1
let g:NERDTreeMinimalUI=1
let g:NERDTreeDirArrows=1
"let g:NERDTreeQuitOnOpen=1
" }}}

" plug NERDTreeTabs {{{
let g:nerdtree_tabs_open_on_console_startup=1
" }}}

" plug vim-test {{{
"nnoremap <silent> <leader>t :TestNearest<CR>
"nnoremap <silent> <leader>T :TestFile<CR>
"nnoremap <silent> <leader>a :TestSuite<CR>
"nnoremap <silent> <leader>l :TestLast<CR>
"nnoremap <silent> <leader>g :TestVisit<CR>
" }}}

" plug vim-indent-guides {{{
let g:indent_guides_enable_on_vim_startup=1
let g:indent_guides_auto_colors=1
let g:indent_guides_guide_size=1
let g:indent_guides_color_change_percent=10
let g:indent_guides_start_level=2
let g:indent_guides_space_guides=1
let g:indent_guides_tab_guides=1
let g:indent_guides_exclude_filetypes=['sh', 'help', 'nerdtree']
let g:indent_guides_default_mapping=1
" }}}

" plug CtrlP {{{
if !exists("g:ctrlp_extensions")
    let g:ctrlp_extensions=[]
endif
let g:ctrlp_extensions+=['buffertag', 'changes']
let g:ctrlp_working_path_mode=2
let g:ctrlp_map='<leader>ff'
let g:ctrlp_mruf_relative=1
let g:ctrlp_mruf_exclude='/\.git/.*\|^/tmp/vimpager.*\|^/var/folders.*'
let g:ctrlp_match_window_reversed=0
nnoremap <silent> <leader>fb :CtrlPBuffer<CR>
nnoremap <silent> <leader>fm :CtrlPMRU<CR>
nnoremap <silent> <leader>ft :CtrlPBufTag<CR>
let g:ctrlp_cmd='CtrlP'
let g:ctrlp_cache_dir=$HOME.'/.cache/ctrlp'
let g:ctrlp_custom_ignore='\vbuild/|dist/|venv/|target/|\.(o|swp|pyc|egg)$'
" }}}

" plug airline {{{
let g:airline_powerline_fonts=1
let g:airline_skip_empty_sections=1
let g:airline#extensions#tabline#enabled=1
let g:airline#extensions#tabline#show_buffers=0
let g:airline#extensions#tabline#tab_nr_type=1
let g:airline_left_sep=' '
let g:airline_right_sep=' '
let g:airline_detect_modified=1
let g:airline_detect_iminsert=1
" }}}

" plug syntastic {{{
let g:syntastic_always_populate_loc_list=0
let g:syntastic_auto_loc_list=1
let g:syntastic_loc_list_height=5
let g:syntastic_check_on_open=0
let g:syntastic_check_on_wq=0
let g:syntastic_aggregate_errors=1
let g:syntastic_id_checkers=1
let g:syntastic_sort_aggregated_errors=0
let g:syntastic_echo_current_error=1
let g:syntastic_cursor_column=0
let g:syntastic_enable_signs=1
let g:syntastic_enable_highlighting=1
let g:syntastic_auto_jump=0 "jump to first err if any, no err no jump
let g:syntastic_shell="/bin/sh"
" php checker
let g:syntastic_php_checkers=['php', 'phpcs', 'phpmd']
let g:syntastic_php_phpcs_args="--standard=psr2 -q -w" " -w means errors and warnings
" }}}

" plug vim-auto-save {{{
let g:auto_save=1
let g:auto_save_silent=0
let g:auto_save_events=['InsertLeave']
let g:auto_save_no_updatetime=1
let g:auto_save_in_insert_mode=0
let g:auto_save_presave_hook=''
" }}}

" plug junegunn/vim-easy-align {{{
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap <leader>a <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap <leader>a <Plug>(EasyAlign)
" }}}

" plug vim-php-cs-fixer {{{
" If php-cs-fixer is in $PATH, you don't need to define line below
"let g:php_cs_fixer_path='~/php-cs-fixer.phar' " define the path to the php-cs-fixer.phar
"
" If you use php-cs-fixer version 2.x
let g:php_cs_fixer_rules='@PSR2'           " options: --rules (default:@PSR2)
let g:php_cs_fixer_cache='.php_cs.cache'   " options: --cache-file
let g:php_cs_fixer_config_file='.php_cs'   " options: --config
" End of php-cs-fixer version 2 config params
"
let g:php_cs_fixer_php_path='php'               " Path to PHP
let g:php_cs_fixer_enable_default_mapping=1     " Enable the mapping by default (<leader>pcd)
let g:php_cs_fixer_dry_run=0                    " Call command with dry-run option
let g:php_cs_fixer_verbose=0                    " Return the output of command if 1, else an inline information.
nnoremap <silent> <leader>pcf :call PhpCsFixerFixFile()<CR><CR>
" }}}

" plug stanangeloff/php.vim {{{
let g:PHP_removeCRwhenUnix=1
let g:PHP_vintage_case_default_indent=1
function! PhpSyntaxOverride()
    hi! def link phpDocTags  phpDefine
    hi! def link phpDocParam phpType
endfunction
augroup phpSyntaxOverride
    autocmd!
    autocmd FileType php call PhpSyntaxOverride()
augroup END
" }}}
" }}}

" Custom Functions {{{
function! ToggleNumber()
    if(&relativenumber == 1)
        set norelativenumber
        set number
    else
        set relativenumber
    endif
endfunc

" strips trailing whitespace at the end of files. this
" is called on buffer write in the autogroup above.
function! <SID>StripTrailingWhitespaces()
    " save last search & cursor position
    let _s=@/
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    let @/=_s
    call cursor(l, c)
endfunction

function! <SID>CleanFile()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %!git stripspace
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction
" }}}

" last exit cursor position {{{
" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
" Also don't do it when the mark is in the first line, that is the default
" position when opening a file.
if has("autocmd")
    autocmd BufReadPost *
                \ if line("'\"") > 1 && line("'\"") <= line("$") |
                \   exe "normal! g`\"" |
                \ endif
endif
" }}}

" vim:foldmethod=marker:foldlevel=0
